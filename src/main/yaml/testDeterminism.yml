incarnation: scafi

variables:
  # SIMULATION VARIABLE
  last_greedy_episodes: { formula: 10.0 }
  learning_episodes: { formula: 5.0 }
  episodes: &episodes { formula: 'learning_episodes + last_greedy_episodes' }
  greedy_each: { formula: learning_episodes }
  episode: &episode { min: 0, max: *episodes, step: 1, default: 0 }
  episode_length: &episode_length { formula: 80 }
  learn: &learn
    language: scala
    formula: >
      val ep = episode.asInstanceOf[java.lang.Double].intValue;
      val each = greedy_each.asInstanceOf[java.lang.Double].intValue;
      val learn_ep = learning_episodes.asInstanceOf[java.lang.Double].intValue;
      learn_ep != 0 && (ep == 0 || ep % each != 0) && ep < learn_ep
  range: &range { formula: 8.0 }
  gamma: &gamma { formula: 0.90 }
  window_size: &window_size { formula: 2 } ## probably better with windows_size = 3
  trajectory_size: &trajectory_size { formula: 2 }
  right_source: &right_source { formula: 'episode % 2 == 0 ? 0 : 19'}
  left_source: &left_source { formula: 'episode % 2 == 0 ? 19 : 0' }
  buckets: &buckets { formula: 32.0 }
  maxRadiusMultiplier: &maxRadiusMultiplier { formula: 4.0 }
  # PROGRAM VARIABLES
  stop_right_source: &stop_right_source { formula: 35 }

seeds: { scenario: 0, simulation: 0 } # put episode to make round firing different
terminate: { type: AfterTime, parameters: [*episode_length] }
environment: { type: Continuous2DEnvironment }
network-model: { type: ConnectWithinDistance, parameters: [*range] }
deployments:
  - type: Grid
    parameters: [0, 0, 100, 5, 5, 5, 0.5, 0.5, 0.0, 0.0] #large
    programs:
      - time-distribution: 1
        type: Event
        actions: { type: RunScafiProgram, parameters: [it.unibo.scafi.casestudy.SwapSourceGradient, 5.0] }
      - program: send

    contents:
      - molecule: range
        concentration: *range
      - molecule: learn
        concentration: *learn
      - molecule: episode
        concentration: *episode
      - molecule: stop_right_source
        concentration: *stop_right_source
      - molecule: gamma
        concentration: *gamma
      - molecule: window
        concentration: *window_size
      - molecule: left_source
        concentration: *left_source
      - molecule: right_source
        concentration: *right_source
      - molecule: episode_length
        concentration: *episode_length
      - molecule: buckets
        concentration: *buckets
      - molecule: maxRadiusMultiplier
        concentration: *maxRadiusMultiplier
      ###### EXPORT DATA
      - molecule: output_reference
        concentration: 0
      - molecule: output_classicHopCount
        concentration: 0
      - molecule: output_crf
        concentration: 0
      - molecule: output_bis
        concentration: 0
      #### RL OUTPUT
      - molecule: output_temporalRL
        concentration: 0
      - molecule: output_crfLikeRL
        concentration: 0
      - molecule: output_crfLikeWithActionRL
        concentration: 0
      - molecule: output_deepRL
        concentration: 0
      #### ERROR
      - molecule: err_classicHopCount
        concentration: 0
      #### RL ERROR
      - molecule: err_temporalRL
        concentration: 0
      - molecule: err_crfLikeRL
        concentration: 0
      - molecule: err_crfLikeWithActionRL
        concentration: 0
      - molecule: err_deepRL
        concentration: 0
      #### STATE OF THE ART ERRORS
      - molecule: err_crf
        concentration: 0
      - molecule: err_bis
        concentration: 0
export:
  - type: CSVExporter
    parameters: [ "gradientExperiments", 1.0, "./data" ]
    data:
    - time
    - molecule: output_reference
      aggregators: [mean]
      value-filter: onlyfinite

    - molecule: output_classicHopCount
      aggregators: [mean]
      value-filter: onlyfinite

    - molecule: output_bis
      aggregators: [ mean ]
      value-filter: onlyfinite

    - molecule: output_crf
      aggregators: [mean]
      value-filter: onlyfinite

    - molecule: output_temporalRL
      aggregators: [mean]
      value-filter: onlyfinite

    - molecule: output_crfLikeRL
      aggregators: [mean]
      value-filter: onlyfinite

    - molecule: output_crfLikeWithActionRL
      aggregators: [mean]
      value-filter: onlyfinite

    - molecule: output_deepRL
      aggregators: [ mean ]
      value-filter: onlyfinite

    - molecule: err_classicHopCount
      aggregators: [sum]
      value-filter: onlyfinite

    - molecule: err_temporalRL
      aggregators: [sum]
      value-filter: onlyfinite

    - molecule: err_crfLikeRL
      aggregators: [sum]
      value-filter: onlyfinite

    - molecule: err_crfLikeWithActionRL
      aggregators: [sum]
      value-filter: onlyfinite

    - molecule: err_deepRL
      aggregators: [sum]
      value-filter: onlyfinite

    - molecule: err_crf
      value-filter: onlyfinite
      aggregators: [sum]

    - molecule: err_bis
      value-filter: onlyfinite
      aggregators: [sum]